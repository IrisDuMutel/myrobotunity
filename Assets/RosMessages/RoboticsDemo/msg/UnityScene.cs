//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.RoboticsDemo
{
    public class UnityScene : Message
    {
        public const string RosMessageName = "robotics_demo/UnityScene";

        public Header header;
        public uint num_boxes;
        public uint[] ymin_px;
        public uint[] xmin_px;
        public uint[] ymax_px;
        public uint[] xmax_px;
        public string[] @object;
        public float[] score;
        public float[] depth;
        public float height;
        public float width;

        public UnityScene()
        {
            this.header = new Header();
            this.num_boxes = 0;
            this.ymin_px = new uint[0];
            this.xmin_px = new uint[0];
            this.ymax_px = new uint[0];
            this.xmax_px = new uint[0];
            this.@object = new string[0];
            this.score = new float[0];
            this.depth = new float[0];
            this.height = 0.0f;
            this.width = 0.0f;
        }

        public UnityScene(Header header, uint num_boxes, uint[] ymin_px, uint[] xmin_px, uint[] ymax_px, uint[] xmax_px, string[] @object, float[] score, float[] depth, float height, float width)
        {
            this.header = header;
            this.num_boxes = num_boxes;
            this.ymin_px = ymin_px;
            this.xmin_px = xmin_px;
            this.ymax_px = ymax_px;
            this.xmax_px = xmax_px;
            this.@object = @object;
            this.score = score;
            this.depth = depth;
            this.height = height;
            this.width = width;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.num_boxes));
            
            listOfSerializations.Add(BitConverter.GetBytes(ymin_px.Length));
            foreach(var entry in ymin_px)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(xmin_px.Length));
            foreach(var entry in xmin_px)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(ymax_px.Length));
            foreach(var entry in ymax_px)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(xmax_px.Length));
            foreach(var entry in xmax_px)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(@object.Length));
            foreach(var entry in @object)
                listOfSerializations.Add(SerializeString(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(score.Length));
            foreach(var entry in score)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(depth.Length));
            foreach(var entry in depth)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            listOfSerializations.Add(BitConverter.GetBytes(this.height));
            listOfSerializations.Add(BitConverter.GetBytes(this.width));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.num_boxes = BitConverter.ToUInt32(data, offset);
            offset += 4;
            
            var ymin_pxArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.ymin_px= new uint[ymin_pxArrayLength];
            for(var i = 0; i < ymin_pxArrayLength; i++)
            {
                this.ymin_px[i] = BitConverter.ToUInt32(data, offset);
                offset += 4;
            }
            
            var xmin_pxArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.xmin_px= new uint[xmin_pxArrayLength];
            for(var i = 0; i < xmin_pxArrayLength; i++)
            {
                this.xmin_px[i] = BitConverter.ToUInt32(data, offset);
                offset += 4;
            }
            
            var ymax_pxArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.ymax_px= new uint[ymax_pxArrayLength];
            for(var i = 0; i < ymax_pxArrayLength; i++)
            {
                this.ymax_px[i] = BitConverter.ToUInt32(data, offset);
                offset += 4;
            }
            
            var xmax_pxArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.xmax_px= new uint[xmax_pxArrayLength];
            for(var i = 0; i < xmax_pxArrayLength; i++)
            {
                this.xmax_px[i] = BitConverter.ToUInt32(data, offset);
                offset += 4;
            }
            
            var @objectArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.@object= new string[@objectArrayLength];
            for(var i = 0; i < @objectArrayLength; i++)
            {
                var @objectStringBytesLength = DeserializeLength(data, offset);
                offset += 4;
                this.@object[i] = DeserializeString(data, offset, @objectStringBytesLength);
                offset += @objectStringBytesLength;
            }
            
            var scoreArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.score= new float[scoreArrayLength];
            for(var i = 0; i < scoreArrayLength; i++)
            {
                this.score[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }
            
            var depthArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.depth= new float[depthArrayLength];
            for(var i = 0; i < depthArrayLength; i++)
            {
                this.depth[i] = BitConverter.ToSingle(data, offset);
                offset += 4;
            }
            this.height = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.width = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "UnityScene: " +
            "\nheader: " + header.ToString() +
            "\nnum_boxes: " + num_boxes.ToString() +
            "\nymin_px: " + System.String.Join(", ", ymin_px.ToList()) +
            "\nxmin_px: " + System.String.Join(", ", xmin_px.ToList()) +
            "\nymax_px: " + System.String.Join(", ", ymax_px.ToList()) +
            "\nxmax_px: " + System.String.Join(", ", xmax_px.ToList()) +
            "\n@object: " + System.String.Join(", ", @object.ToList()) +
            "\nscore: " + System.String.Join(", ", score.ToList()) +
            "\ndepth: " + System.String.Join(", ", depth.ToList()) +
            "\nheight: " + height.ToString() +
            "\nwidth: " + width.ToString();
        }
    }
}
